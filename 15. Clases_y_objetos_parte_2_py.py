# -*- coding: utf-8 -*-
"""15. Clases y Objetos Parte 2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fDsup7L4HCDFu4TkgBQQj4DPFQ-kbQ2Y
"""

# Se empezara a jugar con decoradores y metodos especiales que existen en python

# METODO SIN EMPLEAR DECORADORES

class Rectangulo:

    def __init__(self, base, altura):
        self.base = base
        self.altura = altura

    def area(self):
        print(f" El area es de {self.base * self.altura}")


Rectangulo1 = Rectangulo(20,80)


Rectangulo1.area()

#METODO EMPLEANDO DECORADORES

class Rectangulo:

    def __init__(self, base, altura):
        self.base = base
        self.altura = altura

    @property # Con esto, identificas a la funcion como una propiedad y a su vez para la impresion no tienen que establecerse un metodo como una funcion
    def area(self):
        return self.base * self.altura

    def __str__(self): # Con este metodo puedes realizar la impresion de un objeto segun lo que quieras establecer apenas se realice la impresion
        return f"\n[+] Las Propiedades del Rectangulo son la Base: {self.base} y la Altura: {self.altura}"

    def __eq__(self, Rectangulo2): # Es una funcion de igualdad para probar diferencias entre objetos, devuelve un estado booleano al realizar la comparacion

        return self.base == Rectangulo2.base and self.altura == Rectangulo2.altura


Rectangulo1 = Rectangulo(20,80)
Rectangulo2 = Rectangulo(20,80)

print(f" El area es de {Rectangulo1.area}")
print(Rectangulo1)

print(f"Los Rectangulos 1 y 2 son iguales ? -> {Rectangulo1==Rectangulo2}") # impresion metodo __eq__ de comparacion

# Vista y Creacion de Class Metod y staticmethod

class Libro:

  bestSellerValue = 5000 # Variable global definidad como bestSeller

  def __init__(self, titulo, autor, precio):
    self.titulo = titulo
    self.autor = autor
    self.paginas = precio

  @staticmethod
  def es_bestseller(ventas): # Cuando son funciones que no dependen de nigun atributo del objeto, pueden ser staticmethod

    return ventas > libro1.bestSellerValue  # Uso de Variables de Clase Globales


libro1 = Libro("¿Como ser un Lammer?","Marcelo Vazquez", 17.5)


print(Libro.es_bestseller(7000)) # Debido al metodo estatico, ya no necesitas referenciar al objeto sino a la clase

from typing_extensions import IntVar
# Vista y Creacion de Class Metod y staticmethod

class Libro:


  IVA = 0.21 # Variable de clase Global, para llamarlas nombramos primero a la clase asi = Libro.IVA

  def __init__(self, titulo, autor, precio):
    self.titulo = titulo
    self.autor = autor
    self.precio = precio

  @staticmethod
  def es_bestseller(ventas): # Cuando son funciones que no dependen de nigun atributo del objeto, pueden ser staticmethod

    return ventas > 5000

  @classmethod # Decorador que referencia a la clase objeto como cls, si hay muchas clases sale util para relacionar los metodos de class
  def Precio_con_IVA(cls, precio):
    return precio + precio * cls.IVA



libro1 = Libro("¿Como ser un Lammer?","Marcelo Vazquez", 17.5)


print(Libro.es_bestseller(7000)) # Debido al metodo estatico, ya no necesitas referenciar al objeto sino a la clase

print(f"El precio con IVA es de {Libro.Precio_con_IVA(libro1.precio)}")